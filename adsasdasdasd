
	// window.initMap = () => {
	// 	const directionsService = new google.maps.DirectionsService();
	// 	const directionsRenderer = new google.maps.DirectionsRenderer();
	// 	const map = new google.maps.Map(document.getElementById('routes-map'), {
	// 		// disableDefaultUI: true,
	// 	});
	// 	directionsRenderer.setMap(map);
	// 	calculateDisplayRoutes(directionsService, directionsRenderer);
	// };

	// async function calculateDisplayRoutes(
	// 	directionsService,
	// 	directionsRenderer,
	// ) {
	// 	// let waypts = [{ location: 'EC4V 4EG', stopover: true }];
	// 	let waypts = [];

	// 	document.querySelectorAll('.recipient_postcode').forEach((item) => {
	// 		let wayPointId = item.getAttribute('value');
	// 		waypts.push({
	// 			location: wayPointId,
	// 			stopover: true,
	// 		});
	// 	});
	// 	const waypts2 = waypts.slice(1, -1);
	// 	const numbe = [...Array(10).keys()]

	// 	directionsService.route({
	// 		origin: waypts[0].location,
	// 		destination: waypts.at(-1).location,
	// 		// destination: waypts[0].location, // if end point to be starting point making it a cycle
	// 		waypoints: waypts2,
	// 		// optimizeWaypoints: true,
	// 		travelMode: google.maps.TravelMode.DRIVING,
	// 	}, (response, status) => {
	// 		if (status === 'OK' && response) {
	// 			directionsRenderer.setDirections(response);
	// 			const route = response.routes[0];

	// 			console.log(directionsRenderer)
				
	// 			const summaryPanel = document.getElementById('directions-route');
	// 			summaryPanel.innerHTML += `Starting Point (Warehouse): ` +
	// 				`<strong>${waypts[0].location}</strong>` + `<br><br>`;
	// 			// For each route, display summary information.
	// 			for (let i = 0; i < route.legs.length; i++) {
	// 				const routeSegment = i + 1;
	// 				summaryPanel.innerHTML += '<b>Route Segment: ' +
	// 					routeSegment + '</b><br>';
	// 				// summaryPanel.innerHTML += route.legs[i].start_address +
	// 				// 	` (Package ${i})`;
	// 				summaryPanel.innerHTML += route.legs[i].start_address +
	// 					`  ( ${numbe[i]} )`;
	// 				summaryPanel.innerHTML +=
	// 					'<br><span><strong>to</strong></span>';
	// 				// summaryPanel.innerHTML += route.legs[i].end_address +
	// 				// 	` (Package ${i + 1})` + '<br>';
	// 				summaryPanel.innerHTML += route.legs[i].end_address +
	// 					`  ( ${numbe[i + 1]} )` + '<br>';
	// 				summaryPanel.innerHTML += route.legs[i].distance.text +
	// 					'<br><br>';
	// 			}
	// 			summaryPanel.innerHTML += `<br>End Point (Last delivery): ` +
	// 				`<strong>${waypts.at(-1).location}</strong>` + `<br><br>`;
	// 		} else {
	// 			window.alert('Directions request failed due to ' + status);
	// 		}
	// 	});
	// }

























    


	// let waypoints = []
	// document.querySelectorAll('.recipient_postcode').forEach((item) => {
	// 	let postcode = item.getAttribute('value');
	// 	waypoints.push(postcode);
	// });


	// window.initMap = async function() {
	// 	let markers = Array();

	// 	// this will execute the promises sequentially
	// 	for (const el of waypoints) {
	// 	  const url = `https://maps.googleapis.com/maps/api/geocode/json?address=${el}&key=AIzaSyDD8R7YovtasMKrrOIp8D29AoFiJH8fKSE`;
	// 	  try {
	// 		const res = await fetch(url);
	// 		const value = await res.json(); // alternatively, in a single line: await fetch(..).then(res => res.json());
	  
	// 		let pos = value.results[0].geometry.location;
	// 		markers.push(pos);
	// 		console.log(pos);
	
	
		
	// 			var mapOptions = {
	// 				// center: new google.maps.LatLng(markers[0].latitude, markers[0].longitude),
	// 				center: markers[0],
	// 				// center: 
	// 				zoom: 10,
	// 				mapTypeId: google.maps.MapTypeId.ROADMAP
	// 			};
	// 			var map = new google.maps.Map(document.getElementById("routes-map"), mapOptions);
	
	
	
	
	
	
	
	
	// 	} catch (err) {
	// 		console.log(err);
	// 		display();
	// 	  }
	// 	}
	// 	console.log(markers[0]);
	//   }






	// window.initMap = function() {

	// 	let waypoints = []
	// 	document.querySelectorAll('.recipient_postcode').forEach((item) => {
	// 		let postcode = item.getAttribute('value');
	// 		waypoints.push(postcode);
	// 	});


	// 	[...waypoints].forEach( el => {
	// 		const url = `https://maps.googleapis.com/maps/api/geocode/json?address=${el}&key=AIzaSyDD8R7YovtasMKrrOIp8D29AoFiJH8fKSE`
	// 		fetch(url).then(value => value.json())
	// 		.then((value) => {

				
	// 			const markers = [];
		
	// 			let pos = value.results[0].geometry.location
	// 			markers.push(pos)
	// 			console.log(pos)





	// 			console.log(markers[0].then)

	// 			// console.log("THE markers", markers[0])
		
	// 			// let bounds = new google.maps.LatLngBounds();
	// 			// bounds.extend(oo[0]);
	// 			// bounds.extend(oo[1]);
	// 			// map.fitBounds(bounds);
		
		
	// 			var mapOptions = {
	// 				// center: new google.maps.LatLng(markers[0].latitude, markers[0].longitude),
	// 				center: markers[0],
	// 				// center: 
	// 				zoom: 10,
	// 				mapTypeId: google.maps.MapTypeId.ROADMAP
	// 			};
	// 			var map = new google.maps.Map(document.getElementById("routes-map"), mapOptions);
	// 			//   var infoWindow = new google.maps.InfoWindow();
	// 			//   var lat_lng = new Array();
	// 			//   var latlngbounds = new google.maps.LatLngBounds();
	// 			//   for (i = 0; i < markers.length; i++) {
	// 			// 	var data = markers[i]
	// 			// 	var myLatlng = new google.maps.LatLng(data.latitude, data.longitude);
	// 			// 	lat_lng.push(myLatlng);
	// 			// 	var marker = new google.maps.Marker({
	// 			// 	  position: myLatlng,
	// 			// 	  map: map,
	// 			// 	  title: data.timestamp
	// 			// 	});
	// 			// 	// console.log(i)
				
	// 			// 	latlngbounds.extend(marker.position);
	// 			// 	(function(marker, data) {
	// 			// 	  google.maps.event.addListener(marker, "click", function(e) {
	// 			// 		infoWindow.setContent(data.timestamp);
	// 			// 		infoWindow.open(map, marker);
	// 			// 	  });
	// 			// 	})(marker, data);
	// 			//   }
	// 			//   map.setCenter(latlngbounds.getCenter());
	// 			//   map.fitBounds(latlngbounds);
				
	// 			//   //***********ROUTING****************//
				
				
	// 			//   //Initialize the Direction Service
	// 			//   var service = new google.maps.DirectionsService();
				
				
				
				
	// 			//   //Loop and Draw Path Route between the Points on MAP
	// 			//   for (var i = 0; i < lat_lng.length; i++) {
	// 			// 	if ((i + 1) < lat_lng.length) {
	// 			// 	  var src = lat_lng[i];
	// 			// 	  var des = lat_lng[i + 1];
	// 			// 	  // path.push(src);
				
	// 			// 	  service.route({
	// 			// 		origin: src,
	// 			// 		destination: des,
	// 			// 		travelMode: google.maps.DirectionsTravelMode.WALKING
	// 			// 	  }, function(result, status) {
	// 			// 		if (status == google.maps.DirectionsStatus.OK) {
				
	// 			// 		  //Initialize the Path Array
	// 			// 		  var path = new google.maps.MVCArray();
	// 			// 		  //Set the Path Stroke Color
	// 			// 		  var poly = new google.maps.Polyline({
	// 			// 			map: map,
	// 			// 			strokeColor: '#4986E7'
	// 			// 		  });
	// 			// 		  poly.setPath(path);
	// 			// 		  for (var i = 0, len = result.routes[0].overview_path.length; i < len; i++) {
	// 			// 			path.push(result.routes[0].overview_path[i]);
	// 			// 		  }
	// 			// 		}
	// 			// 	  });
	// 			// 	}
	// 			//   }
			












	// 		}).catch((err) => {
	// 			console.log(err)
	// 			if(err) display()
	// 		})
	// 	})
	// 	}





























































	// 	let waypoints = []
	// 	document.querySelectorAll('.recipient_postcode').forEach((item) => {
	// 		let postcode = item.getAttribute('value');
	// 		waypoints.push(postcode);
	// 	});

	// 	window.initMap = function initMap() {
	// 	//Fetch request to get the geolocation (lat and lng) based on postcode to later display
	// 	//the markers and the line between them
	// 	// const url1 = `https://maps.googleapis.com/maps/api/geocode/json?address=${start}&key=AIzaSyDD8R7YovtasMKrrOIp8D29AoFiJH8fKSE`
	// 	const url2 = `https://maps.googleapis.com/maps/api/geocode/json?address=${end}&key=AIzaSyDD8R7YovtasMKrrOIp8D29AoFiJH8fKSE`
	// 	Promise.all([
	// 		fetch(url1).then(value => value.json()),
	// 		fetch(url2).then(value => value.json())
	// 		]).then((value) => {
			
	// 		//The lat and lng for pick-up (pos1) and drop-off (pos2) locations based on postcode  
	// 		let pos1 = value[0].results[0].geometry.location
	// 			pos2 = value[1].results[0].geometry.location
	// 		console.log(pos1)
	// 		const map = new google.maps.Map(document.getElementById("map-one-parcel"), {
	// 			mapId: "14558a00a81bc942",
	// 			center: pos1,
	// 			tilt: 50,
	// 		});

	// 		//Sets the map to fit the markers and polyline
	// 		let bounds = new google.maps.LatLngBounds();
	// 		bounds.extend(pos1);
	// 		bounds.extend(pos2);
	// 		map.fitBounds(bounds);
	// 		//Tilt effect on the map
	// 		map.setTilt(45)
	// 		//Creates the polyline
	// 		const path = new google.maps.Polyline({
	// 			path: [ pos1, pos2],
	// 			geodesic: true,
	// 			strokeOpacity: 0.0,
	// 			//creates the dotted polyline
	// 			icons: [{
	// 				icon: {
	// 					path: "M 0,-1 0,1",
	// 					strokeOpacity: 1,
	// 					scale: 4
	// 				},
	// 				offset: "0",
	// 				repeat: "20px"
	// 			}],
	// 			strokeColor: "#CC2327"
				
	// 			//Uncomment for a solid polylineline
	// 			// geodesic: true,
	// 			// strokeColor: "#FF0000",
	// 			// strokeOpacity: 1.0,
	// 			// strokeWeight: 3,
	// 		});
	// 		//Creates the first marker (pick-up marker)
	// 		const mark1 = new google.maps.Marker({
	// 				position: pos1,
	// 				icon: {
	// 				url: "https://i.ibb.co/MBfWrx2/Marker-Pick-Up2.png",
	// 				size: new google.maps.Size(36, 45),
	// 				scaledSize: new google.maps.Size(36, 45),
	// 				anchor: new google.maps.Point(17, 48)
	// 				},
	// 				animation: google.maps.Animation.DROP,
	// 				map: map,
	// 		});
	// 		//Creates the second marker (drop-off marker)
	// 		const mark2 = new google.maps.Marker({
	// 				position: pos2,
	// 				icon: {
	// 				url: "https://i.ibb.co/G0fpVRx/Marker-Drop-Off2.png",
	// 				size: new google.maps.Size(36, 45),
	// 				scaledSize: new google.maps.Size(36, 45),
	// 				anchor: new google.maps.Point(17, 48)
	// 				},
	// 				animation: google.maps.Animation.DROP,
	// 				map: map,
	// 		});
	// 		//Adds path and markers to map object
	// 		path.setMap(map);
	// 		mark1.setMap(map);
	// 		mark2.setMap(map);
			
	// 		//Content within the pop-out window for pick-up marker
	// 		const contentString1 =
	// 			'<h2 id="firstHeading" class="firstHeading">Pick-up</h2><br>' +
	// 			`<p style="font-size: 14px"><b>Address:</b> ${startFullAdd}`
				
	// 		//Content within the pop-out window for drop-off marker
	// 		const contentString2 =
	// 			'<h2 id="firstHeading" class="firstHeading">Drop-off</h2><br>' +
	// 			`<p style="font-size: 14px"><b>Address:</b> ${endFullAdd}`
			
	// 		//Pop-out window (pick-up maker - infowindow)
	// 		const infoWindowOptions1 = {
	// 			content: contentString1,
	// 			maxWidth: 200
	// 		};
			
	// 		//Pop-out window (drop-off maker - infowindow)
	// 		const infoWindowOptions2 = {
	// 			content: contentString2,
	// 			maxWidth: 200
	// 		};

	// 		//Create pop-out windows objects
	// 		const infoWindow1 = new google.maps.InfoWindow(infoWindowOptions1);
	// 		const infoWindow2 = new google.maps.InfoWindow(infoWindowOptions2);
			
	// 		//Options to attach to map and display from "mark1"/pick-up marker as the source
	// 		const infoWindowOptionsOpen1 = {
	// 			map: map,
	// 			anchor: mark1,
	// 			shouldFocus: true
	// 		};
			
	// 		//Options to attach to map and display from "mark2"/drop-off marker as the source
	// 		const infoWindowOptionsOpen2 = {
	// 			map: map,
	// 			anchor: mark2,
	// 			shouldFocus: true
	// 		};
	// 		//Event listener to open the infowindow when clicking the pick-up marker
	// 		mark1.addListener('click', ev => {
	// 			infoWindow1.open(infoWindowOptionsOpen1);
	// 		});
	// 		//Event listener to open the infowindow when clicking the drop-off marker
	// 		mark2.addListener('click', ev => {
	// 			infoWindow2.open(infoWindowOptionsOpen2);
	// 		});

	// 		//Event listener to close infowindow when clicking the map
	// 		map.addListener('click', ev => {
	// 			infoWindow1.close(infoWindowOptionsOpen1);
	// 			infoWindow2.close(infoWindowOptionsOpen2);
	// 		});

	// 		//Buttons with settings
	// 		const buttons = [
	// 			///These names are the ones used to display the UI (for the google icons span ting) 
	// 			["navigate_before", "rotate", 20, google.maps.ControlPosition.LEFT_CENTER],
	// 			["navigate_next", "rotate", -20, google.maps.ControlPosition.RIGHT_CENTER],
	// 			["expand_less", "tilt", -10, google.maps.ControlPosition.TOP_CENTER],
	// 			["expand_more", "tilt", 10, google.maps.ControlPosition.BOTTOM_CENTER],
	// 		];

	// 		buttons.forEach(([text, mode, amount, position]) => {
	// 			const controlDiv = document.createElement("div");
	// 			const controlUI = document.createElement("div");
	// 			const span = document.createElement("span")
	// 			span.classList.add("material-symbols-outlined")
	// 			span.setAttribute("id", "arrows")
	// 			span.innerText = `${text}`

	// 			controlUI.append(span)

	// 			controlUI.style.transform = "scale(1.5)"
	// 			controlUI.style.padding = "0.35rem 0.35rem";

	// 			controlUI.addEventListener("mouseover", () => {
	// 				document.body.style.cursor = 'pointer';

	// 			});
				
	// 			controlUI.addEventListener("click", () => {
	// 			adjustMap(mode, amount);
	// 			});
	// 			controlDiv.appendChild(controlUI);
	// 			map.controls[position].push(controlDiv);
	// 		});

	// 		const adjustMap = function (mode, amount) {
	// 			switch (mode) {
	// 			case "tilt":
	// 				map.setTilt(map.getTilt() + amount);
	// 				break;
	// 			case "rotate":
	// 				map.setHeading(map.getHeading() + amount);
	// 				break;
	// 			default:
	// 				break;
	// 			}
	// 		};
	// 	}).catch((err) => {
	// 		console.log(err)
	// 		if(err) display()
	// 	});
	// }