
<!doctype html>

<html lang="en">
	<head>
		<meta charset="utf-8">
		<meta http-equiv="X-UA-Compatible" content="IE=edge">
		<title>Parcel Details</title>
		<meta name="description" content="Individual parcel details">
		<meta name="author" content="Alberto Paros">
		<meta name="viewport" content= "width=device-width, initial-scale=1.0">
		<link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@20..48,100..700,0..1,-50..200" />        
    	<script src="https://polyfill.io/v3/polyfill.min.js?features=default"></script>
		<link href="/style.css" type="text/css" rel="stylesheet" />
		{{!-- This page uses the Google maps API inside the HTML --}}
	</head>
	<body>
		<header>
			<h1><a href="/">Parcelino<span id="dot">.</span></a></h1>
			<ul>
				<li class="logout"><a href="/logout"><span class="material-symbols-outlined">logout</span><span>Log-out</span></a></li>
			</ul>
		</header>

	<main>
		{{!-- <section class="hero-ill">
			<div class="hero-block">Parcel sending made easy!</div>
		</section> --}}

		{{!-- <section class="main-sides"> --}}

			<section class="main-left">
				<nav class="side-nav">
						<ol class="side-nav-bunch">
							{{#if role.admin}}
									<li><a href="/"><span id="side-nav-icon" class="material-symbols-outlined">home</span><span id="side-nav-text">Home</span></a></li>
									<li><a href="/admin-parcels"><span id="side-nav-icon" class="material-symbols-outlined">list</span><span>Parcels</span></a></li>
									<li><a href="/admin-couriers"><span id="side-nav-icon" class="material-symbols-outlined">local_shipping</span><span>Couriers</span></a></li>
							{{/if}}
							
							{{#if role.courier}}
								<li><a href="/"><span id="side-nav-icon" class="material-symbols-outlined">home</span><span id="side-nav-text">Home</span></a></li>
								<li><a href="/courier-parcels"><span id="side-nav-icon" class="material-symbols-outlined">list</span><span>Parcels</span></a></li>
								<li><a href="/courier-transit"><span id="side-nav-icon" class="material-symbols-outlined">check_box</span><span>Transit</span></a></li>
								<li><a href="/courier-route"><span id="side-nav-icon" class="material-symbols-outlined">map</span><span>Route</span></a></li>
								<li><a href="/courier-delivered"><span id="side-nav-icon" class="material-symbols-outlined">map</span><span>Delivered</span></a></li>
								
							{{/if}}
							
							{{#if role.customer}}
								<li><a href="/"><span id="side-nav-icon" class="material-symbols-outlined">home</span><span id="side-nav-text">Home</span></a></li>
								<li><a href="/customer-send"><span id="side-nav-icon" class="material-symbols-outlined">add_box</span><span>Send</span></a></li>
								<li><a href="/customer-current"><span id="side-nav-icon" class="material-symbols-outlined">schedule</span><span>Current</span></a></li>
								<li><a href="/customer-history"><span id="side-nav-icon" class="material-symbols-outlined">inbox</span><span>History</span></a></li>
								{{!-- <li><a href="/courier-route"><span id="side-nav-icon" class="material-symbols-outlined">map</span><span>Route</span></a></li> --}}
							{{/if}}
						</ol>
					</nav>
			</section>

			<section class="main-right">
				
				<h3 class="title-parcel-details">Parcel Details:</h3>
				
				<section class="map-wrapper">
					<div id="map-one-parcel"></div>
					<div style="display:none;" id="error-map-one-parcel"></div>
				</section>


				{{#each parcels}}
				<section class="parcels indiv">
					<table>
						<thead>
							<tr>
								<th>Sender Username</th>
								<th>Sender PostCode</th>
								<th>Sender Full Adress</th>
								<th>Recipient Name</th>
								<th>Recipient PostCode</th>
								<th>Recipient Full Adress</th>
								<th>Weight</th>
								<th>Date Posted</th>
								<th>Date Transit</th>
								<th>Date Delivered</th>
								<th>Unique ID</th>
								<th>Status</th>
								<th></th>
							</tr>
						</thead>
						<tbody>
							<tr class="solo-parcel">
								<td id="sender_username">{{this.sender_username}}</td>
								<td id="sender_postcode">{{this.sender_postcode}}</td>
								<td id="sender_address">{{this.sender_address}}, {{this.sender_city}}, {{this.sender_country}}</td>
								<td id="recipient_name">{{this.recipient_name}}</td>
								<td id="recipient_postcode">{{this.recipient_postcode}}</td>
								<td id="recipient_address">{{this.recipient_address}}, {{this.recipient_city}}, {{this.recipient_country}}</td>
								<td id="weight_kg">{{this.weight_kg}}</td>
								<td id="date_time_created">{{{formated this.date_time_created}}}</td>
								<td id="date_time_in_transit">{{{formated this.date_time_in_transit}}}</td>
								<td id="date_time_delivered">{{{formated this.date_time_delivered}}}</td>
								<td id="uuid">{{this.uuid}}</td>
								<td id="status">{{this.status}}</td>
								{{!-- <td class="button">
									<td>
										<form  id="formis" action="/home-courier-p/{{this.uuid}}" method="post" enctype="multipart/form-data">
											<input type="submit" name="submit" value="Add-Transit">
										</form>
									</td>
									</td>
									<td id="accept"><button onclick="window.location='/home-courier-receiver-details/{{this.uuid}}'" >Deliver</button>	
								</td> --}}
							</tr>
						</tbody>
					</table>
					</section>
						{{#if this.handed_to_name}}
							<section class="delivered-invoice">
								<div class="courier_name">Courier name: <span>{{this.courier_name}}</span></div>
								<div class="handed_to_name">Handed to name: <span>{{this.handed_to_name}}</span></div>
								<div class="handed_to_signature">Signature: <img src="{{this.handed_to_signature}}"></div>
							</section>
						{{/if}}
					{{/each}}
			</section>
	</main>
	<script>
		const start = document.getElementById("sender_postcode").innerHTML
		const end = document.getElementById("recipient_postcode").innerHTML
		const startFullAdd = document.getElementById("sender_address").innerHTML
		const endFullAdd = document.getElementById("recipient_address").innerHTML
		
		function initMap() {
			const url1 = `https://maps.googleapis.com/maps/api/geocode/json?address=${start}&key=AIzaSyDD8R7YovtasMKrrOIp8D29AoFiJH8fKSE`
			const url2 = `https://maps.googleapis.com/maps/api/geocode/json?address=${end}&key=AIzaSyDD8R7YovtasMKrrOIp8D29AoFiJH8fKSE`
			Promise.all([
				fetch(url1).then(value => value.json()),
				fetch(url2).then(value => value.json())
				]).then((value) => {

				let pos1 = value[0].results[0].geometry.location
					pos2 = value[1].results[0].geometry.location
				
				const map = new google.maps.Map(document.getElementById("map-one-parcel"), {
					center: pos1,
				});

				let bounds = new google.maps.LatLngBounds();
				bounds.extend(pos1);
				bounds.extend(pos2);
				map.fitBounds(bounds);

				const path = new google.maps.Polyline({
					path: [ pos1, pos2],
					geodesic: true,
					strokeOpacity: 0.0,
					icons: [{
						//creates the dotted line
						icon: {
							path: 'M 0,-1 0,1',
							strokeOpacity: 1,
							scale: 4
						},
						offset: '0',
						repeat: '20px'
					}],
					strokeColor: 'blue'
				});
				
				const svgMarker = {
					path: 'M10.453 14.016l6.563-6.609-1.406-1.406-5.156 5.203-2.063-2.109-1.406 1.406zM12 2.016q2.906 0 4.945 2.039t2.039 4.945q0 1.453-0.727 3.328t-1.758 3.516-2.039 3.070-1.711 2.273l-0.75 0.797q-0.281-0.328-0.75-0.867t-1.688-2.156-2.133-3.141-1.664-3.445-0.75-3.375q0-2.906 2.039-4.945t4.945-2.039z',
					fillColor: 'blue',
					fillOpacity: 1,
					strokeWeight: 0,
					rotation: 0,
					scale: 2,
					anchor: new google.maps.Point(12, 25),
				};
				const svgMarker2 = {
					path: 'M10.453 14.016l6.563-6.609-1.406-1.406-5.156 5.203-2.063-2.109-1.406 1.406zM12 2.016q2.906 0 4.945 2.039t2.039 4.945q0 1.453-0.727 3.328t-1.758 3.516-2.039 3.070-1.711 2.273l-0.75 0.797q-0.281-0.328-0.75-0.867t-1.688-2.156-2.133-3.141-1.664-3.445-0.75-3.375q0-2.906 2.039-4.945t4.945-2.039z',
					fillColor: 'blue',
					fillOpacity: 1,
					strokeWeight: 0,
					rotation: 0,
					scale: 2,
					anchor: new google.maps.Point(12, 25),
				};
				const mark1 = new google.maps.Marker({
						position: pos1,
						{{!-- icon: svgMarker, --}}
						animation: google.maps.Animation.DROP,
						map: map,
				});
				const mark2 = new google.maps.Marker({
						position: pos2,
						{{!-- icon: svgMarker2, --}}
						animation: google.maps.Animation.DROP,
						map: map,
				});
				
				path.setMap(map)
				mark1.setMap(map)
				mark2.setMap(map)
				
				
				
				{{!-- const lineLength = google.maps.geometry.spherical.computeDistanceBetween(mark1.getPosition(), mark2.getPosition());
				const lineHeading = google.maps.geometry.spherical.computeHeading(mark1.getPosition(), mark2.getPosition());

				// Create two points off the main line to create the curve
				// Also known as "controllers"
				const ctrl1 = google.maps.geometry.spherical.computeOffset(mark1.getPosition(), lineLength / 3, lineHeading );
				const ctrl2 = google.maps.geometry.spherical.computeOffset(mark2.getPosition(), lineLength / 3, -lineHeading );
				
				const curvedLine = new GmapsCubicBezier(mark1.getPosition(), ctrl1, ctrl2, mark2.getPosition(), 0.01, map); --}}

				}).catch((err) => {
					console.log(err)
					if(err) display()
				});
		}
		// Create a geodesic Polyline with the "path" array.
		const GmapsCubicBezier = function (latlong1, latlong2, latlong3, latlong4, resolution, map) {
			let lat1 = latlong1.lat();
			let long1 = latlong1.lng();
			let lat2 = latlong2.lat();
			let long2 = latlong2.lng();
			let lat3 = latlong3.lat();
			let long3 = latlong3.lng();
			let lat4 = latlong4.lat();
			let long4 = latlong4.lng();

			let points = [];

			for (it = 0; it <= 1; it += resolution) {
				points.push(this.getBezier({
					x: lat1,
					y: long1
				}, {
					x: lat2,
					y: long2
				}, {
					x: lat3,
					y: long3
				}, {
					x: lat4,
					y: long4
				}, it));
			}

			let path = [];
			for (let i = 0; i < points.length - 1; i++) {
				path.push(new google.maps.LatLng(points[i].x, points[i].y));
				path.push(new google.maps.LatLng(points[i + 1].x, points[i + 1].y, false));
						}
						
				let Line = new google.maps.Polyline({
					path: path,
					geodesic: true,
					strokeOpacity: 0.0,
					icons: [{
						//creates the dotted line
						icon: {
							path: 'M 0,-1 0,1',
							strokeOpacity: 1,
							scale: 4
						},
						offset: '0',
						repeat: '20px'
					}],
					strokeColor: 'red'
				});

				Line.setMap(map);

			return Line;
		};


		GmapsCubicBezier.prototype = {

			B1: function (t) {
				return t * t * t;
			},
			B2: function (t) {
				return 3 * t * t * (1 - t);
			},
			B3: function (t) {
				return 3 * t * (1 - t) * (1 - t);
			},
			B4: function (t) {
				return (1 - t) * (1 - t) * (1 - t);
			},
			getBezier: function (C1, C2, C3, C4, percent) {
				let pos = {};
				pos.x = C1.x * this.B1(percent) + C2.x * this.B2(percent) + C3.x * this.B3(percent) + C4.x * this.B4(percent);
				pos.y = C1.y * this.B1(percent) + C2.y * this.B2(percent) + C3.y * this.B3(percent) + C4.y * this.B4(percent);
				return pos;
			}
		};



		/* In case there is an error with the postcode the map will not be shown */
		function display(status){
			let map_error = document.getElementById('error-map-one-parcel')
			let map = document.getElementById('map-one-parcel')
			map.style.display = 'none'
			map_error.innerHTML = `The map could not be displayed status code: <strong>${status}</strong> <br>
									Probably the postcode is faulty.`
			map_error.style.display = 'block'
		}
		window.initMap = initMap
	</script>

    <script
      src="https://maps.googleapis.com/maps/api/js?key=AIzaSyDD8R7YovtasMKrrOIp8D29AoFiJH8fKSE&libraries=geometry&callback=initMap&v=weekly"
      defer
    ></script>
	</body>	
</html>


